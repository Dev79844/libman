generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model authors {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  biography   String
  book_author book_author[]
}

model book_author {
  id        Int      @id @default(autoincrement())
  book_id   Int?
  author_id Int?
  authors   authors? @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  books     books?   @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model book_genre {
  id       Int     @id @default(autoincrement())
  book_id  Int?
  genre_id Int?
  books    books?  @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  genres   genres? @relation(fields: [genre_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model books {
  id                 Int           @id @default(autoincrement())
  title              String        @db.VarChar(255)
  publisher          String?
  year               String?       @db.VarChar(50)
  total_quantity     Int?
  available_quantity Int?
  isbn               String?       @db.VarChar(255)
  late_fee_per_day   Decimal?      @db.Decimal(10, 2)
  description        String?
  language           String?       @db.VarChar(50)
  book_author        book_author[]
  book_genre         book_genre[]
  checkouts          checkouts[]
  images             images[]
}

model checkouts {
  id            Int       @id @default(autoincrement())
  book_id       Int?
  user_id       Int?
  checkout_date DateTime? @db.Date
  due_date      DateTime? @db.Date
  return_date   DateTime? @db.Date
  status        String?   @db.VarChar(50)
  late_fees     Decimal?  @default(0.00) @db.Decimal(10, 2)
  books         books?    @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model genres {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  book_genre book_genre[]
}

model users {
  id             Int         @id @default(autoincrement())
  email          String      @db.VarChar(255)
  password       String      @db.VarChar(255)
  mobile         String?     @db.VarChar(50)
  role           String      @default("user") @db.VarChar(50)
  name           String?     @db.VarChar(255)
  company        String?     @db.VarChar(255)
  address_line_1 String?
  address_line_2 String?
  city           String?
  state          String?
  country        String?
  pincode        String?     @db.VarChar(50)
  checkouts      checkouts[]
}

model images {
  id      Int     @id @default(autoincrement())
  name    String? @db.VarChar(255)
  book_id Int?
  url     String?
  books   books?  @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
